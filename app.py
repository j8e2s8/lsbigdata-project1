# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui




def server(input: Inputs, output: Outputs, session: Session) -> None:
    import pandas as pd
    import numpy as np
    import plotly.express as px
    from palmerpenguins import load_penguins

    penguins = load_penguins()
    # penguins.head()

    fig = px.scatter(
        penguins,
        x="bill_length_mm",
        y="bill_depth_mm",
        color="species",
        # trendline="ols" # p.134
    )
    fig.show()

    # ========================================================================

    from itables import show
    show(penguins, buttons = ['copy', 'excel', 'pdf'])

    # ========================================================================

    from shiny.express import input, render, ui

    ui.input_selectize(
        "var", "Select variable",
        choices=["bill_length_mm", "body_mass_g"]
    )

    @render.plot
    def hist():
        from matplotlib import pyplot as plt
        from palmerpenguins import load_penguins

        df = load_penguins()
        df[input.var()].hist(grid=False)
        plt.xlabel(input.var())
        plt.ylabel("count")

    # ========================================================================

    articles = 100
    comments = 50
    spam_num = 300

    # ========================================================================

    dict(
      value = articles
    )

    # ========================================================================

    dict(
      icon = "chat",
      color = "primary",
      value = comments
    )

    # ========================================================================

    dict(
      icon = "airplane-engines",
      color = "#f0330b",
      value = spam_num
    )

    # ========================================================================

    import pandas as pd
    import numpy as np
    import plotly.express as px
    from palmerpenguins import load_penguins

    penguins = load_penguins()
    # penguins.head()

    fig = px.scatter(
        penguins,
        x="bill_length_mm",
        y="bill_depth_mm",
        color="species",
        # trendline="ols" # p.134
    )
    fig.show()

    # ========================================================================

    # #| echo: FALSE
    from shiny.express import input, render, ui
    import matplotlib.pyplot as plt
    penguins = load_penguins()

    ui.input_selectize(
                "var", "Select variable",
        choices=["bill_length_mm", "body_mass_g"])

    # ========================================================================

    @render.plot
    def hist():
        from matplotlib import pyplot as plt
        from palmerpenguins import load_penguins

        df = load_penguins()
        plt.hist(penguins[input.var()], stats = 'density')
        plt.xlabel(input.var())
        plt.ylabel("count")

    # ========================================================================



    return None


_static_assets = ["teacherdashboard_files","teacherdashboard_files\\libs\\quarto-html\\tippy.css","teacherdashboard_files\\libs\\quarto-html\\quarto-syntax-highlighting.css","teacherdashboard_files\\libs\\bootstrap\\bootstrap-icons.css","teacherdashboard_files\\libs\\bootstrap\\bootstrap.min.css","teacherdashboard_files\\libs\\quarto-dashboard\\datatables.min.css","teacherdashboard_files\\libs\\clipboard\\clipboard.min.js","teacherdashboard_files\\libs\\quarto-html\\quarto.js","teacherdashboard_files\\libs\\quarto-html\\popper.min.js","teacherdashboard_files\\libs\\quarto-html\\tippy.umd.min.js","teacherdashboard_files\\libs\\quarto-html\\anchor.min.js","teacherdashboard_files\\libs\\bootstrap\\bootstrap.min.js","teacherdashboard_files\\libs\\quarto-dashboard\\quarto-dashboard.js","teacherdashboard_files\\libs\\quarto-dashboard\\stickythead.js","teacherdashboard_files\\libs\\quarto-dashboard\\datatables.min.js","teacherdashboard_files\\libs\\quarto-dashboard\\pdfmake.min.js","teacherdashboard_files\\libs\\quarto-dashboard\\vfs_fonts.js","teacherdashboard_files\\libs\\quarto-dashboard\\web-components.js","teacherdashboard_files\\libs\\quarto-dashboard\\components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "teacherdashboard.html",
    server,
    static_assets=_static_assets,
)
